regionin = "state:06+county:085",
vars = "P001001"
) %>%
transmute(
block =
paste0(state,county,tract,block),
pop_2010 = P001001
)
scc_blocks_2010 <- blocks("CA", "Santa Clara", year = 2010, progress_bar = F)
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2010 <-  scc_blocks_2010 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2010 %>% select(GEOID10)) %>%
st_as_sf() %>%
select(GEOID10) %>%
left_join(scc_pop_2010 %>% rename(GEOID10 = block))
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
la_blocks_2020_reshaped <- la_blocks_2020_intersect %>%
st_drop_geometry() %>% ##we just want to focus on the "broken pieces" and putting them together
group_by(GEOID10)%>% ##GEOID10 > GEOID20 but either works
summarize(
pop_2020 = sum(pop_2020, na.rm = T) %>% round(), ##add all the small pop counts to a larger pop count
)
projection <- "+proj=utm +zone=10 +ellps=GRS80 +datum=NAD83 +units=ft +no_defs"
la_pop_2010_2020 <- la_blocks_2010 %>%
st_transform(4326) %>%
left_join(la_blocks_2020_reshaped) %>% ##blocks now have GEOIDs and pop info.
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(st_area(.)) * 43560 ##pop per acre, 43560 converts from sq ft to acres
)
##will help knit for overflow issues
saveRDS(la_pop_2010_2020, "la_pop_2010_2020.rds")
max <- max(abs(la_pop_2010_2020$absolute_pop)) ##take every single pop change you created and makes them all abs values and tells you what the biggest one was.
absolute_pal <- colorNumeric(
palette = "PiYG",
domain = c(-max, max) #feeding the data which was placed in the max variable into the symmetrical color palette.
)
la_pop_2010_2020 <- readRDS("la_pop_2010_2020.rds") ##will help knit for overflow issues
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
fillColor = ~absolute_pal(absolute_pop), ##use the pal relevant to your range of colors)
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1,
label = ~paste0(
round(absolute_pop)
),
highlightOptions = highlightOptions(
weight = 2,
opacity = 1
)
) %>%
addLegend(
data = la_pop_2010_2020,
pal = absolute_pal,
values = ~absolute_pop,
title = "Population Difference in Los Altos Between 2010 and 2020"
)
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
saveRDS(scc_blocks_2020, "scc_blocks_2020.rds")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
saveRDS(scc_blocks_2020, "scc_blocks_2020.rds")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
##access the census data
dec_vars_2020 <-
listCensusMetadata(
name = "2020/dec/pl",
type = "variables"
)
##Access the population data
scc_pop_2020 <-
getCensus(
name = "dec/pl",
vintage = 2020,
region = "block:*",
regionin = "state:06+county:085",
vars = "P1_001N"
)%>%
transmute(
block =
paste0(state,county,tract,block),
pop_2020 = P1_001N
)
scc_blocks_2020 <- blocks("CA", "Santa Clara", year = 2020, progress_bar = F)
saveRDS(scc_blocks_2020, "scc_blocks_2020.rds")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2020 <-  scc_blocks_2020 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2020 %>% select(GEOID20)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
##mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_2020 <- readRDS("scc_pop_2020.rds")
##access the census data
dec_vars_2020 <-
listCensusMetadata(
name = "2020/dec/pl",
type = "variables"
)
##Access the population data
scc_pop_2020 <-
getCensus(
name = "dec/pl",
vintage = 2020,
region = "block:*",
regionin = "state:06+county:085",
vars = "P1_001N"
)%>%
transmute(
block =
paste0(state,county,tract,block),
pop_2020 = P1_001N
)
scc_blocks_2020 <- blocks("CA", "Santa Clara", year = 2020, progress_bar = F)
saveRDS(scc_blocks_2020, "scc_blocks_2020.rds")
saveRDS(scc_pop_2020, "scc_pop_2020.rds")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_2020 <- readRDS("scc_pop_2020.rds")
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary, ] %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2020 <-  scc_blocks_2020 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2020 %>% select(GEOID20)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
##mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_2020 <- readRDS("scc_pop_2020.rds")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_2020 <- readRDS("scc_pop_2020.rds")
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2020 <-  scc_blocks_2020 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2020 %>% select(GEOID20)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
##mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary, ] %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
dec_vars_2010 <-
listCensusMetadata(
name = "2010/dec/pl",
type = "variables"
)
scc_pop_2010 <-
getCensus(
name = "dec/pl",
vintage = 2010,
region = "block:*",
regionin = "state:06+county:085",
vars = "P001001"
) %>%
transmute(
block =
paste0(state,county,tract,block),
pop_2010 = P001001
)
scc_blocks_2010 <- blocks("CA", "Santa Clara", year = 2010, progress_bar = F)
saveRDS(scc_blocks_2010, "scc_blocks_2010.rds")
scc_blocks_2010 <- readRDS("scc_blocks_2010.rds")
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2010 <-  scc_blocks_2010 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2010 %>% select(GEOID10)) %>%
st_as_sf() %>%
select(GEOID10) %>%
left_join(scc_pop_2010 %>% rename(GEOID10 = block))
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
la_blocks_2020_reshaped <- la_blocks_2020_intersect %>%
st_drop_geometry() %>% ##we just want to focus on the "broken pieces" and putting them together
group_by(GEOID10)%>% ##GEOID10 > GEOID20 but either works
summarize(
pop_2020 = sum(pop_2020, na.rm = T) %>% round(), ##add all the small pop counts to a larger pop count
)
projection <- "+proj=utm +zone=10 +ellps=GRS80 +datum=NAD83 +units=ft +no_defs"
la_pop_2010_2020 <- la_blocks_2010 %>%
st_transform(4326) %>%
left_join(la_blocks_2020_reshaped) %>% ##blocks now have GEOIDs and pop info.
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(st_area(.)) * 43560 ##pop per acre, 43560 converts from sq ft to acres
)
##will help knit for overflow issues
saveRDS(la_pop_2010_2020, "la_pop_2010_2020.rds")
max <- max(abs(la_pop_2010_2020$absolute_pop)) ##take every single pop change you created and makes them all abs values and tells you what the biggest one was.
absolute_pal <- colorNumeric(
palette = "PiYG",
domain = c(-max, max) #feeding the data which was placed in the max variable into the symmetrical color palette.
)
la_pop_2010_2020 <- readRDS("la_pop_2010_2020.rds") ##will help knit for overflow issues
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
fillColor = ~absolute_pal(absolute_pop), ##use the pal relevant to your range of colors)
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1,
label = ~paste0(
round(absolute_pop)
),
highlightOptions = highlightOptions(
weight = 2,
opacity = 1
)
) %>%
addLegend(
data = la_pop_2010_2020,
pal = absolute_pal,
values = ~absolute_pop,
title = "Population Difference in Los Altos Between 2010 and 2020"
)
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary,] %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
knitr::opts_chunk$set(echo = F)
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(tidycensus)
library(leaflet)
Sys.setenv(CENSUS_KEY ="c18a7f6e5cbbd1e7f0d3047d8b674cbaad89bcb3")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_2020 <- readRDS("scc_pop_2020.rds")
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary,] %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
dec_vars_2010 <-
listCensusMetadata(
name = "2010/dec/pl",
type = "variables"
)
scc_pop_2010 <-
getCensus(
name = "dec/pl",
vintage = 2010,
region = "block:*",
regionin = "state:06+county:085",
vars = "P001001"
) %>%
transmute(
block =
paste0(state,county,tract,block),
pop_2010 = P001001
)
scc_blocks_2010 <- blocks("CA", "Santa Clara", year = 2010, progress_bar = F)
saveRDS(scc_blocks_2010, "scc_blocks_2010.rds")
scc_blocks_2010 <- readRDS("scc_blocks_2010.rds")
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2010 <-  scc_blocks_2010 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2010 %>% select(GEOID10)) %>%
st_as_sf() %>%
select(GEOID10) %>%
left_join(scc_pop_2010 %>% rename(GEOID10 = block))
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
saveRDS(la_blocks_2010, "la_blocks_2010.rds")
la_blocks_2010 <- readRDS("la_blocks_2010.rds")
la_blocks_2020_reshaped <- la_blocks_2020_intersect %>%
st_drop_geometry() %>% ##we just want to focus on the "broken pieces" and putting them together
group_by(GEOID10)%>% ##GEOID10 > GEOID20 but either works
summarize(
pop_2020 = sum(pop_2020, na.rm = T) %>% round(), ##add all the small pop counts to a larger pop count
)
projection <- "+proj=utm +zone=10 +ellps=GRS80 +datum=NAD83 +units=ft +no_defs"
la_pop_2010_2020 <- la_blocks_2010 %>%
st_transform(4326) %>%
left_join(la_blocks_2020_reshaped) %>% ##blocks now have GEOIDs and pop info.
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(st_area(.)) * 43560 ##pop per acre, 43560 converts from sq ft to acres
)
##will help knit for overflow issues
saveRDS(la_pop_2010_2020, "la_pop_2010_2020.rds")
max <- max(abs(la_pop_2010_2020$absolute_pop)) ##take every single pop change you created and makes them all abs values and tells you what the biggest one was.
absolute_pal <- colorNumeric(
palette = "PiYG",
domain = c(-max, max) #feeding the data which was placed in the max variable into the symmetrical color palette.
)
la_pop_2010_2020 <- readRDS("la_pop_2010_2020.rds") ##will help knit for overflow issues
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
fillColor = ~absolute_pal(absolute_pop), ##use the pal relevant to your range of colors)
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1,
label = ~paste0(
round(absolute_pop)
),
highlightOptions = highlightOptions(
weight = 2,
opacity = 1
)
) %>%
addLegend(
data = la_pop_2010_2020,
pal = absolute_pal,
values = ~absolute_pop,
title = "Population Difference in Los Altos Between 2010 and 2020"
)
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary,] %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
saveRDS(la_blocks_2020, "la_blocks_2020.rds")
la_blocks_2020 <- readRDS("la_blocks_2020.rds")
knitr::opts_chunk$set(echo = F)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(4326) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(4326)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(tidycensus)
library(leaflet)
Sys.setenv(CENSUS_KEY ="c18a7f6e5cbbd1e7f0d3047d8b674cbaad89bcb3")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_2020 <- readRDS("scc_pop_2020.rds")
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2020 <-  scc_blocks_2020 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2020 %>% select(GEOID20)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
##mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary,] %>%
select(GEOID20) %>%
left_join(scc_pop_2020 %>% rename(GEOID20 = block))
saveRDS(la_blocks_2020, "la_blocks_2020.rds")
la_blocks_2020 <- readRDS("la_blocks_2020.rds")
dec_vars_2010 <-
listCensusMetadata(
name = "2010/dec/pl",
type = "variables"
)
scc_pop_2010 <-
getCensus(
name = "dec/pl",
vintage = 2010,
region = "block:*",
regionin = "state:06+county:085",
vars = "P001001"
) %>%
transmute(
block =
paste0(state,county,tract,block),
pop_2010 = P001001
)
scc_blocks_2010 <- blocks("CA", "Santa Clara", year = 2010, progress_bar = F)
saveRDS(scc_blocks_2010, "scc_blocks_2010.rds")
scc_blocks_2010 <- readRDS("scc_blocks_2010.rds")
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2010 <-  scc_blocks_2010 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2010 %>% select(GEOID10)) %>%
st_as_sf() %>%
select(GEOID10) %>%
left_join(scc_pop_2010 %>% rename(GEOID10 = block))
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(4326) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(4326)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
saveRDS(la_blocks_2010, "la_blocks_2010.rds")
la_blocks_2010 <- readRDS("la_blocks_2010.rds")
la_blocks_2020_reshaped <- la_blocks_2020_intersect %>%
st_drop_geometry() %>% ##we just want to focus on the "broken pieces" and putting them together
group_by(GEOID10)%>% ##GEOID10 > GEOID20 but either works
summarize(
pop_2020 = sum(pop_2020, na.rm = T) %>% round(), ##add all the small pop counts to a larger pop count
)
projection <- "+proj=utm +zone=10 +ellps=GRS80 +datum=NAD83 +units=ft +no_defs"
la_pop_2010_2020 <- la_blocks_2010 %>%
st_transform(4326) %>%
left_join(la_blocks_2020_reshaped) %>% ##blocks now have GEOIDs and pop info.
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(st_area(.)) * 43560 ##pop per acre, 43560 converts from sq ft to acres
)
##will help knit for overflow issues
saveRDS(la_pop_2010_2020, "la_pop_2010_2020.rds")
max <- max(abs(la_pop_2010_2020$absolute_pop)) ##take every single pop change you created and makes them all abs values and tells you what the biggest one was.
absolute_pal <- colorNumeric(
palette = "PiYG",
domain = c(-max, max) #feeding the data which was placed in the max variable into the symmetrical color palette.
)
la_pop_2010_2020 <- readRDS("la_pop_2010_2020.rds") ##will help knit for overflow issues
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
fillColor = ~absolute_pal(absolute_pop), ##use the pal relevant to your range of colors)
color = "white",
opacity = 0.5,
fillOpacity = 0.75,
weight = 1,
label = ~paste0(
round(absolute_pop)
),
highlightOptions = highlightOptions(
weight = 2,
opacity = 1
)
) %>%
addLegend(
data = la_pop_2010_2020,
pal = absolute_pal,
values = ~absolute_pop,
title = "Population Difference in Los Altos Between 2010 and 2020"
)
