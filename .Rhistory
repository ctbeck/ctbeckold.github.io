scc_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2010 = estimate * perc_area
)
la_blocks_2010_reshaped <- la_blocks_2010_intersect %>%
st_drop_geometry() %>%
group_by(estimate)%>%
summarize(
pop_2010 = sum(estimate, na.rm = T) %>% round(),
)
projection <- la_blocks_2020_intersect
la_pop_2010_2020 <- la_blocks_2010 %>%
left_join(pop_2020) %>%
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(perc_area) * 5280^2 / 1000
)
projection <- la_blocks_2020_intersect
la_pop_2010_2020 <- la_blocks_2010 %>%
left_join(pop_2020) %>%
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(perc_area) * 5280^2 / 1000
)
la_pop_2010_2020 <- la_blocks_2010 %>%
left_join(pop_2020) %>%
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(perc_area) * 5280^2 / 1000
)
```{r}
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = scc_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) ##%>%
#addPolygons(
# data = scc_blocks_2010,
# color = "red",
# weight = 0.75,
# fill = F
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) ##%>%
#addPolygons(
# data = scc_blocks_2010,
# color = "red",
# weight = 0.75,
# fill = F
#)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010_reshaped,
color = "red",
weight = 0.75,
fill = F
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)%>%
addLegend(
pal = pal,
value = value,
title = "Population Density Change Between 2010 and 2020 in Los Altos "
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)%>%
addLegend(
pal = pal,
values,
title = "Population Density Change Between 2010 and 2020 in Los Altos "
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)%>%
addLegend(
pal = pal,
values,
title = "Population Density Change Between 2010 and 2020 in Los Altos ",
na.label = "NA",
bins = 7,
colors,
opacity = 0.5,
labels = NULL,
labFormat = labelFormat(),
title = NULL,
className = "info legend",
layerId = NULL,
group = NULL,
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)%>%
addLegend(
pal = pal,
values,
title = "Population Density Change Between 2010 and 2020 in Los Altos "
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)%>%
addLegend(
pal = pal,
title = "Population Density Change Between 2010 and 2020 in Los Altos "
)
max <- max(abs(50000), abs(50000))
absolute_pal <- colorNumeric(
palette = "piYG",
domain = c(-red,green)
)
max <- max(abs(50000), abs(50000))
absolute_pal <- colorNumeric(
palette = "piYG",
domain = c(-1,5000)
)
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)%>%
addLegend(
pal = pal,
values =
title = "Population Density Change Between 2010 and 2020 in Los Altos "
leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
data = la_pop_2010_2020,
stroke = F,
fillOpacity = 0.5
) %>%
addPolygons(
data = la_blocks_2010,
color = "red",
weight = 0.75,
fill = F
)
knitr::opts_chunk$set(echo = F)
projection <- la_blocks_2020_intersect
la_pop_2010_2020 <- la_blocks_2010 %>%
left_join(pop_2020) %>%
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(perc_area) * 5280^2 / 1000
)
max <- max(abs(50000), abs(50000))
absolute_pal <- colorNumeric(
palette = "piYG",
domain = c(-1,5000)
)
rm(large_df, large_list, large_vector, temp_variables)
rm(large_df, large_list, large_vector, temp_variables)
rm(list = ls())
knitr::opts_chunk$set(echo = F)
readRDS()
projection <- la_blocks_2020_intersect
la_pop_2010_2020 <- la_blocks_2010 %>%
left_join(pop_2020) %>%
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(perc_area) * 5280^2 / 1000
)
setwd("~/Documents/GitHub/ctbeck.github.io")
la_pop_2010_2020 <- readRDS("la_pop_2010_2020.rds") ##will help knit for overflow issues
projection <- la_blocks_2020_intersect
la_blocks_2010_reshaped <- la_blocks_2010_intersect %>%
st_drop_geometry() %>%
group_by(estimate)%>%
summarize(
pop_2010 = sum(estimate, na.rm = T) %>% round(),
)
la_blocks_2010_reshaped <- la_blocks_2010_intersect %>%
st_drop_geometry() %>%
group_by(estimate)%>%
summarize(
pop_2010 = sum(estimate, na.rm = T) %>% round(),
)
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(tidycensus)
library(leaflet)
Sys.setenv(CENSUS_KEY ="c18a7f6e5cbbd1e7f0d3047d8b674cbaad89bcb3")
projection <- "+proj=utm +zone=10 +ellps=GRS80 +datum=NAD83 +units=ft +no_defs"
la_pop_2010_2020 <- la_blocks_2010 %>%
st_transform(projection) %>%
left_join(pop_2020) %>%
mutate(
absolute_pop = (pop_2020 - pop_2010) / as.numeric(st_area(.)) * 43560 ##pop per acre, 43560 converts from sq ft to acres
)
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(tidycensus)
library(leaflet)
Sys.setenv(CENSUS_KEY ="c18a7f6e5cbbd1e7f0d3047d8b674cbaad89bcb3")
##access the census data
dec_vars_2020 <-
listCensusMetadata(
name = "2020/dec/pl",
type = "variables"
)
##Access the subdivision by race
scc_pop_race_2020 <-
getCensus(
name = "dec/pl",
vintage = 2020,
region = "block:*",
regionin = "state:06+county:085",
vars = "group(P1)" ##all pop subdivided by race, still total pop
) %>%
mutate(
block =
paste0(state,county,tract,block)
) %>%
select(!c(GEO_ID,state,county,tract,NAME) & !ends_with(c("NA"))) %>%
pivot_longer(
ends_with("N"),
names_to = "name",
values_to = "estimate"
) %>%
left_join(
dec_vars_2020 %>%
select(name, label)
) %>%
select(-name) %>%
separate(
label,
into = c(NA,NA,"category1","category2"),
sep = "!!"
)
scc_blocks_2020 <- blocks("CA", "Santa Clara", year = 2020, progress_bar = F)
saveRDS(scc_blocks_2020, "scc_blocks_2020.rds")
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_race_2020 <- scc_pop_race_2020 %>%
mutate(
race = case_when(
category1 == "Population of two or more races:" & is.na(category2) ~ "Two or more races",
category1 == "Population of two or more races:" ~ "",
!is.na(category2) ~ category2,
TRUE ~ ""
)
)
scc_blocks_2020 <- readRDS("scc_blocks_2020.rds")
scc_pop_race_2020 <- scc_pop_race_2020 %>%
mutate(
race = case_when(
category1 == "Population of two or more races:" & is.na(category2) ~ "Two or more races",
category1 == "Population of two or more races:" ~ "",
!is.na(category2) ~ category2,
TRUE ~ ""
)
)
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2020 <-  scc_blocks_2020 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2020 %>% select(GEOID20)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID20) %>%
left_join(scc_pop_race_2020 %>% rename(GEOID20 = block))
##mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary, ] %>%
select(GEOID20) %>%
left_join(scc_pop_race_2020 %>% rename(GEOID20 = block))
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary, ] %>%
select(GEOID20) %>%
left_join(scc_pop_race_2020 %>% rename(GEOID20 = block))
##view(scc_pop_race_2020)
## narrow down to just population numbers for 2020
pop_2020 <- select(
scc_pop_race_2020,estimate)
# do the actual block transformation
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = estimate * perc_area
)
dec_vars_2010 <-
listCensusMetadata(
name = "2010/dec/pl",
type = "variables"
)
scc_pop_race_2010 <-
getCensus(
name = "dec/pl",
vintage = 2010,
region = "block:*",
regionin = "state:06+county:085",
vars = "group(P1)"
) %>%
mutate(
block =
paste0(state,county,tract,block)
) %>%
select(!c(GEO_ID,state,county,tract,NAME) & !ends_with(c("NA"))) %>%
pivot_longer(
-block,
names_to = "name",
values_to = "estimate"
) %>%
left_join(
dec_vars_2010 %>%
select(name, label)
) %>%
select(-name) %>%
separate(
label,
into = c(NA,NA,"category1","category2"),
sep = "!!"
)
scc_blocks_2010 <- blocks("CA", "Santa Clara", year = 2010, progress_bar = F)
scc_pop_race_2010 <- scc_pop_race_2010 %>%
mutate(
race = case_when(
category1 == "Population of two or more races:" & is.na(category2) ~ "Two or more races",
category1 == "Population of two or more races:" ~ "",
!is.na(category2) ~ category2,
TRUE ~ ""
)
)
la_blocks_2020_reshaped <- la_blocks_2020_intersect %>%
st_drop_geometry() %>%
group_by(estimate)%>%
summarize(
pop_2020 = sum(estimate, na.rm = T) %>% round(),
)
##view(scc_pop_race_2020)
## narrow down to just population numbers for 2020
pop_2010 <- select(
scc_pop_race_2010,estimate)
# do the actual block transformation
la_blocks_2010_intersect <- la_blocks_2010 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2010 = estimate * perc_area
)
##view(scc_pop_race_2020)
## narrow down to just population numbers for 2020
pop_2020 <- select(
scc_pop_race_2020,estimate)
# do the actual block transformation
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = estimate * perc_area
)
la_blocks_2010 <- scc_blocks_2010 %>%
.[la_boundary, ] %>%
select(GEOID10) %>%
left_join(scc_pop_race_2010 %>% rename(GEOID10 = block))
##view(scc_pop_race_2020)
## narrow down to just population numbers for 2020
pop_2020 <- select(
scc_pop_race_2020,estimate)
# do the actual block transformation
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = estimate * perc_area
)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
la_blocks_2010 %>%
select(GEOID10) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = estimate * perc_area
)
