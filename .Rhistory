Sys.setenv(CENSUS_KEY ="c18a7f6e5cbbd1e7f0d3047d8b674cbaad89bcb3")
##access the census data
dec_vars_2020 <-
listCensusMetadata(
name = "2020/dec/pl",
type = "variables"
)
##Access the subdivision by race
scc_pop_race_2020 <-
getCensus(
name = "dec/pl",
vintage = 2020,
region = "block:*",
regionin = "state:06+county:081",
vars = "group(P1)" ##all pop subdivided by race, still total pop
) %>%
mutate(
block =
paste0(state,county,tract,block)
) %>%
select(!c(GEO_ID,state,county,tract,NAME) & !ends_with(c("NA"))) %>%
pivot_longer(
ends_with("N"),
names_to = "name",
values_to = "estimate"
) %>%
left_join(
dec_vars_2020 %>%
select(name, label)
) %>%
select(-name) %>%
separate(
label,
into = c(NA,NA,"category1","category2"),
sep = "!!"
)
scc_blocks_2020 <- blocks("CA", "Santa Clara", year = 2020, progress_bar = F)
scc_pop_race_2020 <- scc_pop_race_2020 %>%
mutate(
race = case_when(
category1 == "Population of two or more races:" & is.na(category2) ~ "Two or more races",
category1 == "Population of two or more races:" ~ "",
!is.na(category2) ~ category2,
TRUE ~ ""
)
)
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2020 <-  scc_blocks_2020 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2020 %>% select(GEOID20)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID20) %>%
left_join(scc_pop_race_2020 %>% rename(GEOID20 = block))
mapview(scc_blocks_2020) + mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
dec_vars_2010 <-
listCensusMetadata(
name = "2010/dec/pl",
type = "variables"
)
scc_pop_race_2010 <-
getCensus(
name = "dec/pl",
vintage = 2010,
region = "block:*",
regionin = "state:06+county:081",
vars = "group(P1)"
) %>%
mutate(
block =
paste0(state,county,tract,block)
) %>%
select(!c(GEO_ID,state,county,tract,NAME) & !ends_with(c("NA"))) %>%
pivot_longer(
-block,
names_to = "name",
values_to = "estimate"
) %>%
left_join(
dec_vars_2010 %>%
select(name, label)
) %>%
select(-name) %>%
separate(
label,
into = c(NA,NA,"category1","category2"),
sep = "!!"
)
scc_blocks_2010 <- blocks("CA", "Santa Clara", year = 2010, progress_bar = F)
scc_pop_race_2010 <- scc_pop_race_2010 %>%
mutate(
race = case_when(
category1 == "Population of two or more races:" & is.na(category2) ~ "Two or more races",
category1 == "Population of two or more races:" ~ "",
!is.na(category2) ~ category2,
TRUE ~ ""
)
)
MAP 2010 RACE SUBDIVISION:
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2010 <-  scc_blocks_2010 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2010 %>% select(GEOID10)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID10) %>%
left_join(scc_pop_race_2010 %>% rename(GEOID10 = block))
mapview(scc_blocks_2010) + mapview(la_blocks_2010, alpha.regions = 0, color = "green", lwd = 2)
mapview(la_blocks_2010) + mapview(la_blocks_2020)
mapview(la_blocks_2010, alpha.regions = 0, color = "blue", lwd = 2) + mapview(la_blocks_2020, alpha.regions = 0, color =  "green", lwd = 2)
mapview(la_blocks_2010, alpha.regions = 0, color = "green", lwd = 2)
mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
mapview(la_blocks_2010, alpha.regions = 0, color = "blue", lwd = 2) + mapview(la_blocks_2020, alpha.regions = 0, color =  "green", lwd = 2)
la_pop_2010_2020 <- la_blocks_2010 %>%
left_join(scc_pop_race_2010 %>% rename(GEOID10 = block)) %>%
mutate(
absolute_pop = (la_blocks_2020 - la_blocks_2010) / as.numeric(integer) * 5280^2 / 1000
)
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary, ] %>%
select(GEOID20) %>%
left_join(scc_pop_race_2020 %>% rename(GEOID20 = block))
```{r}
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transfrom(26910) %>%
mutate(original_area = area = st_area(.)) %>%
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transfrom(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = leftover_area / original_area,
total_pop_change = pop * perc_area
)
la_blocks_2020_intersect <- la_blocks_2020 %>%
la_transfrom(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = leftover_area / original_area,
total_pop_change = pop * perc_area
)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = leftover_area / original_area,
total_pop_change = pop * perc_area
)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = leftover_area / original_area,
pop_2020 = la_pop_2020 * perc_area
)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = la_pop_2020 * perc_area
)
knitr::opts_chunk$set(echo = TRUE)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
GET THE POP WITHIN GEOID10 BOUNDARIES
```{r}
la_blocks_2020_reshaped <- la_blocks_2020_intersect %>%
st_drop_geometry() %>%
group_by(___) %>%
summarize(
pop_2020 = sum(___, na.rm=T) %>% round()
)
```
projection <- x
projection <- la_blocks_2020_intersect
absolute_pop = (scc_pop_race_2020 - scc_pop_race_2010)
absolute_pop = (scc_pop_race_2020 - scc_pop_race_2010) / as.numeric(perc_area) * 5280^2 / 1000
perc_area = as.numeric(leftover_area / original_area),
perc_area = as.numeric(leftover_area / original_area)
leftover_area = st_area(.),
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area)
)
mutate(
leftover_area = st_area(.)
perc_area = as.numeric(leftover_area / original_area)
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area)
)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(tidycensus)
library(leaflet)
Sys.setenv(CENSUS_KEY ="c18a7f6e5cbbd1e7f0d3047d8b674cbaad89bcb3")
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area)
)
SPATIAL SUBSETTING METHOD FROM 2.4
```{r}
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area)
)
```
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = scc_pop_race_2020 * perc_area
)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = pop_2020 * perc_area
)
colnames()
colnames(scc_pop_race_2020)
colnames(la_blocks_2020)
colnames(la_pop_2020)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = la_pop_2020 * perc_area
)
colnames(la_blocks_2020)
View(la_blocks_2020)
scc_pop_race_2020
View(scc_pop_race_2020)
```{r}
dec_vars_2010 <-
listCensusMetadata(
name = "2010/dec/pl",
type = "variables"
)
scc_pop_race_2010 <-
getCensus(
name = "dec/pl",
vintage = 2010,
region = "block:*",
regionin = "state:06+county:085",
vars = "group(P1)"
) %>%
mutate(
block =
paste0(state,county,tract,block)
) %>%
select(!c(GEO_ID,state,county,tract,NAME) & !ends_with(c("NA"))) %>%
pivot_longer(
-block,
names_to = "name",
values_to = "estimate"
) %>%
left_join(
dec_vars_2010 %>%
select(name, label)
) %>%
select(-name) %>%
separate(
label,
into = c(NA,NA,"category1","category2"),
sep = "!!"
)
View(la_blocks_2020)
scc_blocks_2010 <- blocks("CA", "Santa Clara", year = 2010, progress_bar = F)
colnames(la_blocks_2020)
la_blocks_2020 <- scc_blocks_2020 %>%
.[la_boundary, ] %>%
select(GEOID20) %>%
left_join(scc_pop_race_2020 %>% rename(GEOID20 = block))
la_boundary <- places("CA", progress_bar = F) %>%
filter(NAME == "Los Altos")
la_blocks_2020 <-  scc_blocks_2020 %>%
st_centroid() %>%
.[la_boundary, ] %>%
st_drop_geometry()  %>%
left_join(scc_blocks_2020 %>% select(GEOID20)) %>% ##when joining two cols you need to specify what cols to join across the two datasets
st_as_sf() %>%
select(GEOID20) %>%
left_join(scc_pop_race_2020 %>% rename(GEOID20 = block))
mapview(la_blocks_2020, alpha.regions = 0, color = "red", lwd = 2)
scc_pop_race_2020 <- scc_pop_race_2020 %>%
mutate(
race = case_when(
category1 == "Population of two or more races:" & is.na(category2) ~ "Two or more races",
category1 == "Population of two or more races:" ~ "",
!is.na(category2) ~ category2,
TRUE ~ ""
)
)
View(scc_pop_race_2020)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = scc_pop_race_2020 * perc_area
)
colnames(scc_pop_race_2020)
view(scc_pop_race_2020)
pop_2020 = scc_pop_race_2020 * perc_area
perc_area = as.numeric(leftover_area / original_area),
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = scc_pop_race_2020 * perc_area
la_blocks_2020_intersect <- la_blocks_2020 %>%
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = scc_pop_race_2020 * perc_area
##view(scc_pop_race_2020)
la_blocks_2020_intersect <- la_blocks_2020 %>%
##view(scc_pop_race_2020)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = scc_pop_race_2020 * perc_area
)
library(tidyverse)
library(sf)
library(tigris)
library(censusapi)
library(mapview)
library(tidycensus)
library(leaflet)
Sys.setenv(CENSUS_KEY ="c18a7f6e5cbbd1e7f0d3047d8b674cbaad89bcb3")
##view(scc_pop_race_2020)
la_blocks_2020_intersect <- la_blocks_2020 %>%
st_transform(26910) %>%
mutate(original_area = st_area(.)) %>%
st_intersection(
scc_blocks_2020 %>%
select(GEOID20) %>%
st_transform(26910)
)%>%
mutate(
leftover_area = st_area(.),
perc_area = as.numeric(leftover_area / original_area),
pop_2020 = scc_pop_race_2020 * perc_area
)
##access the census data
dec_vars_2020 <-
listCensusMetadata(
name = "2020/dec/pl",
type = "variables"
)
##Access the subdivision by race
scc_pop_race_2020 <-
getCensus(
name = "dec/pl",
vintage = 2020,
region = "block:*",
regionin = "state:06+county:085",
vars = "group(P1)" ##all pop subdivided by race, still total pop
) %>%
summarize(
pop_2020 = sum(estimate, na.rm = T)
) %>%
mutate(
block =
paste0(state,county,tract,block)
) %>%
select(!c(GEO_ID,state,county,tract,NAME) & !ends_with(c("NA"))) %>%
pivot_longer(
ends_with("N"),
names_to = "name",
values_to = "estimate"
) %>%
left_join(
dec_vars_2020 %>%
select(name, label)
) %>%
select(-name) %>%
separate(
label,
into = c(NA,NA,"category1","category2"),
sep = "!!"
)
